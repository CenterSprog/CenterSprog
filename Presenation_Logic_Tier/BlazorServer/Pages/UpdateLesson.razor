@page "/UpdateLesson/{ClassId}/{LessonId}"
@using Microsoft.AspNetCore.Components
@using Domain.DTOs.LessonDTO
@using Domain.Models
@using HttpClients.ClientInterfaces

@inject IClassService classService
@inject ILessonService lessonService
@inject NavigationManager navMgr

<div  xmlns="http://www.w3.org/1999/html" >
    
    <h3>Update Lesson</h3>
    <br/>
    

    <div>
        
        <h5 class="text-sm-center">If you are a teacher update the lesson here  </h5></div>
   
        
    
    <div class="form-floating mb-3">
        <input type="text" class="form-control" id="floatingInput" @bind="lessonDto.Topic">
        <label for="floatingInput">Topic:</label>
    </div>
    <br/>
    <div class="form-floating mb-3">
        <input type="date" class="form-control" id="floatingInput" @bind="Date">
        <label for="floatingInput">Date</label>
    </div>
    <br/>
    <div class="form-floating">
        <textarea class="form-control" id="floatingTextarea" @bind="lessonDto.Description"></textarea>
        <label for="floatingTextarea">Description:</label>
    </div>
    <br/>
  
    <div class="button-row">
        
        <button @onclick="Update" type="button" class="btn btn-primary">Update Lesson</button>
    </div>
</div>

@if (msg is not null)
{
    <div>
        @msg
    </div>
}
@*
<Modal ShowModal="showModal">
    <p>You have successfully created a new lesson!</p>
    <button @onclick="@Proceed">Wonderful</button>
</Modal>*@



@code {
    //private bool showModal;
    public LessonUpdateDTO lessonDto;
    public DateTime Date { get; set; }
    private string msg = "";
    private string Topic = "";
    private string Description = "";
    
    [Parameter]
    public string ClassId { get; set; }
   [Parameter]
   public string LessonId { get; set; }
     
   
   
   

    
    
    protected override void OnInitialized()
    
    {
        Date = DateTime.Now;
        lessonDto = new LessonUpdateDTO(LessonId);
        base.OnInitialized();
    }

   /* protected override async Task OnInitializedAsync()
    {
        try
        {

            Date = DateTime.Now;

            lessonDto = new LessonUpdateDTO(ClassId);
            lessonDto = new LessonUpdateDTO(lessonId)
            {
                Topic = lessonDto.Topic,
                Date = lessonDto.Date,
                Description = lessonDto.Description,
                    Id="",
                
            };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }*/



    private async Task Update()
    {
        try
            {
                lessonDto.Date = Date.ToFileTimeUtc();
                //var createdLesson = await lessonService.UpdateLessonAsync(lessonDto);
                await lessonService.UpdateLessonAsync(lessonDto);
                navMgr.NavigateTo($"/classes/{ClassId}");
                
                msg = "Lesson created successfully!";
    //showModal = true;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                msg = e.Message;
            }
    
           /*
            await lessonService.UpdateLessonAsync(lessonUpdateDto);
            navMgr.NavigateTo($"/Lessons/{lessonUpdateDto.Id}");*/
            
    // ValidateLesson();
    //await lessonService.CreateAsync(lessonDto);

          //  var updatedLesson = await lessonService.UpdateLessonAsync(lessonUpdateDto);
            //navMgr.NavigateTo($"/lessons/{updatedLesson.Id}");
            //msg = "Lesson updated successfully!";
    //showModal = true;
        
    }
    
    
   
 
    // private void ValidateLesson()
    //
      
    /* if (lessonDto.Topic == "")
            throw new Exception("Topic is required");
        if(lessonDto.Description == "")
            throw new Exception("Description is required");
       // if (Date == "")
          //  throw new Exception("The date is required"); Error
    }*/
    
}