@page "/"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.ClassDTO
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IClassService classService
@inject NavigationManager navMgr

@if (classes == null)
{
    <span>Loading classes...</span>
}
else if (!classes.Any())
{
    <p>No classes to display</p>
}
else
{
    
    <div class="classes-container">
        @foreach (ClassEntity _class in classes)
        {
            <div class="class-card" @onclick="() => ViewClass(_class)">
                <div class="class-header">
                    <h4 class="class-text">@_class.Title @_class.Room</h4>
                </div>
                </div>
        }
    </div>
}

@code
{
    private IEnumerable<ClassEntity>? classes;
    private string msg = "";
    
        
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity?.Name;
        msg = "";
        try
        {
            classes = await classService.GetAllAsync(new SearchClassDTO(username));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void ViewClass(ClassEntity classEntity)
    {
        var classId = classEntity.Id;
        Console.WriteLine($"Getting lessons for the class with id: {classId}");
        navMgr.NavigateTo($"/classes/{classId}");
        Console.WriteLine($"Navigating to the class details page with the id {classId}");
    }
}
