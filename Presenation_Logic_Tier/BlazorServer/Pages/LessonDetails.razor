@page "/Lessons/{lessonId}"  
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.HomeworkDTO
@inject ILessonService lessonService
@inject IHandInHomeworkService HandInHomeworkService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navMgr

<AuthorizeView>
    <Authorized>
        @if (lesson != null)
        {
            <div class="lesson-container">
                <div class="lesson-card">
                    <div class="lesson-header">
                        <div class="icon-container">
                            <img src="/notebook.png" alt="Lesson Icon"/>
                        </div>
                        <div class="lesson-header-content">
                            <h3>Lesson. @lesson.Date @lesson.Topic</h3>
                        </div>
                    </div>
                    <div class="lesson-description">
                        <p>@lesson.Description</p>
                    </div>
                </div>
            </div>

            @if (lesson.Homework != null)
            {
                <div class="homework-container">
                    <div class="homework-card">
                        <div class="homework-header">
                            <div class="icon-container">
                                <img src="/homework.png" alt="Homework Icon"/>
                            </div>
                            <div class="homework-header-content">
                                <h3>Homework. @lesson.Date @lesson.Homework.Title</h3>
                            </div>
                        </div>
                        <div class="homework-description">
                            <p>@lesson.Homework.Description</p>
                            <p><strong>Deadline:</strong> @lesson.Homework.Deadline </p>
                        </div>
                        <AuthorizeView Policy="MustBeTeacher">
                            <Authorized Context="teacherAuthorized">
                                        <div class="submitted-container">
                                        <button @onclick="ViewSubmittedHomeworks" type="button"><strong>View submitted homeworks</strong></button>
                                        </div>
                            </Authorized>
                        </AuthorizeView>
                       
                        
                            
                            <AuthorizeView Policy="MustBeStudent">
                                <Authorized Context="studentAuthorized">
                                    <div class="input-container">

                                    @if (!homeworkSubmitted)
                                    {

                                        <input @bind="answer" type="text" placeholder="Paste your answer here"/>
                                        <button @onclick="HandInHomework" type="button"><strong>Hand in</strong></button>
                                    }
                                    else
                                    {
                                        <div class="submitted-container">
                                            <button class="submitted-button" disabled><strong>Submitted</strong></button>
                                            <button @onclick="SeeFeedback" type="button"><strong>See feedback</strong></button>
                                        </div>

                                    }
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                    </div>
                </div>
            }
            else
            {
                <div class="homework-container homework-no-content">
                    <div class="homework-card">
                        <div class="homework-header">
                            <div class="icon-container">
                                <img src="/homework.png" alt="Homework Icon"/>
                            </div>
                            <div class="homework-header-content">
                                <h3>Homework. </h3>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (Msg is not null)
            {
                <div>
                    @Msg
                </div>
            }
            
            <AuthorizeView Policy="MustBeTeacher">
                <Authorized Context="teacherAuthorized">
                                @if (lesson.Homework == null)
                                {
                                    <AssignHomeworkComponent LessonId=@lessonId LessonDate=@lesson.Date/>
                                }
                </Authorized>
            </AuthorizeView>




        }

        @code {

            [Parameter]
            public string lessonId { get; set; }

            Lesson lesson;
            Homework homework;
            HandInHomework handInHomework;
            User user;
            HomeworkHandInDTO Dto { get; set; }

            private bool homeworkSubmitted = false;
            private string answer;
            public string Msg { get; set; }

            protected override async Task OnInitializedAsync()
            {
                
                try
                {
                    lesson = await lessonService.GetByIdAsync(lessonId);
                    homework = lesson.Homework;
                    
                        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                        var user = authState.User;
                        var username = user.Identity?.Name;
                    try
                    {
                        handInHomework = await HandInHomeworkService.GetHandInByHomeworkIdAndStudentUsernameAsync(homework.Id, username);

                        homeworkSubmitted = handInHomework != null;
                    }
                    catch (Exception e)
                    {
                        homeworkSubmitted = false;
                    }
                    
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    Msg = $"{e.Message}";
                }
            }

            private async Task HandInHomework()
            {
                try
                {
                    handInHomework = new HandInHomework
                    {
                        Id = "",
                        Answer = answer,
                        StudentUsername = ""
                    };
                    
                    handInHomework.Answer = answer;
                    
                    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                    var user = authState.User;
                    var username = user.Identity?.Name;
                    
                    Dto = new HomeworkHandInDTO(homework.Id, username, handInHomework);
                    await HandInHomeworkService.HandInHomework(Dto);
                    Console.WriteLine("Homework submitted successfully!");
                    
                    homeworkSubmitted = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error submitting homework: {ex.Message}");
                    Msg = $"Error submitting homework: {ex.Message}";
                }
            }


            private void ViewSubmittedHomeworks()
            {
                var homeworkId = homework.Id;
                Console.WriteLine($"Getting submitted homeworks for the homework with id: {homeworkId}");
                navMgr.NavigateTo($"/Homeworks/{homeworkId}");
                Console.WriteLine($"Navigating to the submitted homeworks page with the id: {homeworkId}");
            }
            
            
            private void SeeFeedback()
            {
            // see feedback logic 
            }
        }

    </Authorized>
    
    <NotAuthorized>
        <p>You are not authorized to view this content.</p>
    </NotAuthorized>
</AuthorizeView>

