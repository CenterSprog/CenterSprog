@page "/Lessons/{lessonId}"  
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.HomeworkDTO
@using UIComponents
@inject ILessonService lessonService
@inject IHandInHomeworkService HandInHomeworkService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFeedbackService FeedbackService
@inject NavigationManager navMgr

@if (Lesson != null)
{
    <LessonDetailComponent Lesson=@Lesson/>

    @if (Lesson.Homework != null)
    {
        <div class="homework-container">
            <div class="homework-card">
                <div class="homework-header">
                    <div class="icon-container">
                        <img src="/homework.png" alt="Homework Icon"/>
                    </div>
                    <div class="homework-header-content">
                        <h3>Homework. @Lesson.Date @Lesson.Homework.Title</h3>
                    </div>
                </div>
                <div class="homework-description">
                    <p>@Lesson.Homework.Description</p>
                    <p>
                        <strong>Deadline:</strong> @Lesson.Homework.Deadline
                    </p>
                </div>
                <AuthorizeView Policy="MustBeTeacher">
                    <Authorized Context="teacherAuthorized">
                        <div class="submitted-container">
                            <button @onclick="ViewSubmittedHomeworks" type="button">
                                <strong>View submitted homeworks</strong>
                            </button>
                        </div>
                    </Authorized>
                </AuthorizeView>


                <AuthorizeView Policy="MustBeStudent">
                    <Authorized Context="studentAuthorized">
                        <div class="input-container">

                            @if (!HomeworkSubmitted)
                            {
                                <input @bind="Answer" type="text" placeholder="Paste your answer here"/>
                                <button @onclick="HandInHomework" type="button">
                                    <strong>Hand in</strong>
                                </button>
                            }
                            else
                            {
                                <div class="submitted-container">
                                    <button class="submitted-button" disabled>
                                        <strong>Submitted</strong>
                                    </button>
                                    <button @onclick="SeeFeedback" type="button">
                                        <strong>See feedback</strong>
                                    </button>
                                </div>
                            }
                            <div class="msg-container">
                                @if (Msg is not null)
                                {
                                    <div>
                                        @Msg
                                    </div>
                                }
                            </div>

                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    }
    else
    {
        <div class="homework-container homework-no-content">
            <div class="homework-card">
                <div class="homework-header">
                    <div class="icon-container">
                        <img src="/homework.png" alt="Homework Icon"/>
                    </div>
                    <div class="homework-header-content">
                        <h3>Homework. </h3>
                        <p>No homework for this lesson yet. Check back later!</p>
                    </div>
                </div>
            </div>
        </div>
    }


    <Modal ShowModal="@showModal">
        <div class="modal-container">
            <div class="modal-header">
                <h4>Feedback</h4>
                <button type="button" class="close-button" aria-label="Close" @onclick="() => CloseModal()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Grade:</strong> @Feedback.Grade</p>
                <p><strong>Comment:</strong> @Feedback.Comment</p>
            </div>
        </div>
    </Modal>

    <AuthorizeView Policy="MustBeTeacher">
        <Authorized Context="teacherAuthorized">
            @if (Lesson.Homework == null)
            {
                <AssignHomeworkComponent LessonId=@lessonId LessonDate=@Lesson.Date/>
            }
        </Authorized>
    </AuthorizeView>
}


@code {

    [Parameter]
    public string lessonId { get; set; }

    Lesson Lesson { get; set; }
    Homework Homework { get; set; }
    HandInHomework handInHomework { get; set; }
    User User { get; set; }
    HomeworkHandInDTO Dto { get; set; }
    Feedback Feedback { get; set; }

    public bool HomeworkSubmitted { get; set; }
    public string Answer { get; set; }
    public string Msg { get; set; }

    private bool showModal { get; set; }
    private string studentUsername { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Lesson = await lessonService.GetByIdAsync(lessonId);
        Msg = null;
        Answer = null;
        HomeworkSubmitted = false;
        Feedback = new Feedback();
        User = new User();
        Homework = new Homework();
        handInHomework = new HandInHomework();
        showModal = false;
        studentUsername = null;


        await FetchHandins();

        await base.OnInitializedAsync();
    }

    private async Task FetchHandins()
    {
        try
        {
            Msg = null;
            Lesson = await lessonService.GetByIdAsync(lessonId);
            Homework = Lesson.Homework;

            var username = await GetAuthenticatedUsernameAsync();
            try
            {
                handInHomework = await HandInHomeworkService.GetHandInByHomeworkIdAndStudentUsernameAsync(Homework.Id, username);

                HomeworkSubmitted = handInHomework != null;
            }
            catch (Exception e)
            {
                HomeworkSubmitted = false;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Msg = e.Message;
        }
    }

    private async Task HandInHomework()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Answer))
            {
                Msg = "Please provide an answer before submitting.";
                StateHasChanged();
                return;
            }
            handInHomework = new HandInHomework
            {
                Id = "",
                Answer = Answer,
                StudentUsername = ""
            };

            handInHomework.Answer = Answer;

            var username = await GetAuthenticatedUsernameAsync();

            Dto = new HomeworkHandInDTO(Homework.Id, username, handInHomework);
            await HandInHomeworkService.HandInHomework(Dto);
            Console.WriteLine("Homework submitted successfully!");

            HomeworkSubmitted = true;
            Msg = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting homework: {ex.Message}");
            Msg = $"Error submitting homework: {ex.Message}";
        }
    }


    private void ViewSubmittedHomeworks()
    {
        var homeworkId = Homework.Id;
        Console.WriteLine($"Getting submitted homeworks for the homework with id: {homeworkId}");
        navMgr.NavigateTo($"/Homeworks/{homeworkId}");
        Console.WriteLine($"Navigating to the submitted homeworks page with the id: {homeworkId}");
    }


    private async Task SeeFeedback()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var username = await GetAuthenticatedUsernameAsync();

            if (handInHomework != null && username != null)
            {
                var feedback = await FeedbackService.GetFeedbackByHandInIdAndStudentUsernameAsync(handInHomework.Id, username);

                if (feedback != null)
                {
                    Feedback = new Feedback
                    {
                        Grade = feedback.Grade,
                        Comment = feedback.Comment
                    };

                    studentUsername = username;
                    Answer = "";
                    showModal = true;
                }
                else
                {
                    Console.WriteLine("No feedback available for this hand-in.");
                }
            }
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching feedback: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            Msg = "No feedback is available at the moment";
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task<string> GetAuthenticatedUsernameAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity?.Name;
    }

}