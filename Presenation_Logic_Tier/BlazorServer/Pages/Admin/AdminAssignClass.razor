@page "/admin/assign"
@using Domain.Models
@using Domain.DTOs.ClassDTO
@using HttpClients.ClientInterfaces
@using HttpClients.Implementations
@inject IClassService ClassService
@inject IUserService UserService
@attribute [Authorize("MustBeAdmin")]

<h3>AssignClass</h3>

<section class="d-flex flex-column">


    <select class="form-select" aria-label="Class selection" @onchange="HandleClassChangeAsync">
        @if (MyClasses.Any())
        {
            <option selected value="">Select class to manage</option>
            @foreach (var classEntity in MyClasses)
            {
                <option value="@classEntity.Id">
                    @classEntity.Title
                </option>
            }
        }
        else
        {
            <option selected value="">No classes exists. Please add them first!</option>
        }

    </select>

    <div class="d-flex flex-column input-group container mt-4 mh-100">
        @if (Users.Count > 0 && CheckList.Count == Users.Count)
        {
            <h5 class="lead">Users to reassign:</h5>
            @for (int i = 0; i < Users.Count; ++i)
            {
                int index = i;
                <div class="d-flex flex-row pt-1">

                    <input @bind="CheckList[index]" class="form-check-input" id="userCheck-@Users[index].Username" type="checkbox"/>


                    <label class="ms-2 form-check-label" for="userCheck-@Users[index].Username">
                        <span class="text-muted">@Users[index].Role.ToUpper()</span> | @Users[index].FirstName @Users[index].LastName
                    </label>
                </div>
            }
        }

    </div>


    <div class="d-flex flex-column justify-content-between mt-5">
        <button class="btn btn-outline-success" @onclick="HandleSubmitAsync">Reassign classes</button>
        @if (Success is not null)
        {
            <div class="alert-success alert mt-5">
                @Success
            </div>
        }

        @if (Msg != null)
        {
            <div class="alert-danger alert mt-5">
                @Msg
            </div>
        }
    </div>
</section>
<a class="btn btn-outline-secondary mt-3" href="admin">Back to admin page</a>


@code {

    public string? Msg { get; set; }
    public string? Success { get; set; }
    public string? SelectedClassId { get; set; }
    public IEnumerable<ClassEntity> MyClasses { get; set; }
    public List<User> Users { get; set; }
    public List<Boolean> CheckList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Msg = null;
        Success = null;
        SelectedClassId = null;
        MyClasses = new List<ClassEntity>();
        CheckList = new List<Boolean>();
        Users = new List<User>();

        await FetchClassesAsync();


        await base.OnInitializedAsync();
    }

    private async Task FetchClassesAsync()
    {
        try
        {
            MyClasses = await ClassService.GetAllAsync(UserHttpClient.Jwt, new SearchClassDTO{Username = null});
        }
        catch (Exception e)
        {
            Msg = e.Message;
        }
    }

    private async Task FetchUsersAsync()
    {
        try
        {
            Users = (await UserService.GetAllAsync()).ToList();
        }
        catch (Exception e)
        {
            Msg = e.Message;
        }
    }

    private async Task HandleClassChangeAsync(ChangeEventArgs args)
    {
        Success = Success;
        SelectedClassId = args.Value.ToString();
        Users = new List<User>();
        CheckList = new List<Boolean>();
        if (SelectedClassId == null || SelectedClassId.Equals("")) return;

        await FetchUsersAsync();
        for (int i = 0; i < Users.Count; i++)
        {
            User currentUser = Users[i];

            bool isParticipant = MyClasses.First(c => c.Id == SelectedClassId).Participants.Any(u => u.Username == currentUser.Username);

            CheckList.Add(isParticipant);
        }
    }

    private async void HandleSubmitAsync()
    {
        if (SelectedClassId == "")
        {
            Msg = "No class selected :/";
            return;
        }
        ClassUpdateDTO dto = new ClassUpdateDTO(SelectedClassId);

        for (int i = 0; i < Users.Count; ++i)
        {
            if (CheckList[i])
                dto.Participants.Add(Users[i].Username);
        }

        try
        {
            bool updatedWithSuccess = await ClassService.UpdateClass(UserHttpClient.Jwt, dto);

            if (updatedWithSuccess == false)
                throw new Exception("Failed to update the class :/");
            Success = "Successfully updated the class :)";
            await FetchClassesAsync();
        }
        catch (Exception e)
        {
            Msg = e.Message;
        }
    }

}