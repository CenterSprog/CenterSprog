@page "/CreateLesson"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.LessonDTO
@using Microsoft.AspNetCore.Components
@inject IUserService userService
@inject ILessonService lessonService
@inject NavigationManager navMgr

<div  xmlns="http://www.w3.org/1999/html" >
    
        <h3>Create Lesson</h3>
  <br/>
  <div class="form-floating mb-3">
      <input type="text" class="form-control" id="floatingInput" @bind="lessonDto.Topic">
      <label for="floatingInput">Topic:</label>
  </div>
  <br/>
  <div class="form-floating mb-3">
         <input type="date" class="form-control" id="floatingInput" @bind="Date">
         <label for="floatingInput">Date</label>
     </div>
   <br/>
   <div class="form-floating">
       <textarea class="form-control" id="floatingTextarea" @bind="lessonDto.Description"></textarea>
       <label for="floatingTextarea">Description:</label>
   </div>
  <br/>
  
        <div class="button-row">
          @*  @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }*@
            <button @onclick="Create" type="button" class="btn btn-primary">Create Lesson</button>
        </div>
    </div>
@if (msg is not null)
{
    <div>
        @msg
    </div>
}
@*
<Modal ShowModal="showModal">
    <p>You have successfully created a new lesson!</p>
    <button @onclick="@Proceed">Wonderful</button>
</Modal>*@


@code {
   
    
    //private bool showModal;
    public LessonCreationDTO lessonDto;
    public DateTime Date { get; set; }
    private string msg = "";
    private string lessonTopic = "";
    private string Description = "";
    
    [Parameter]
    public string classId { get; set; }
    //[Parameter]
    //public long LessonDate { get; set; }*/
    
   
    
  /*
    protected override void OnInitialized()
    {
        Dto = new HomeworkCreationDTO(LessonId);
        Date = DateTime.Now;
        base.OnInitialized();
    }*/
    
    protected override void OnInitialized()
    {
        
        Date = DateTime.Now;
        lessonDto = new LessonCreationDTO(classId);
        base.OnInitialized();
    }


    public async Task Create()
    {
       try
        {
            lessonDto.Date = Date.ToFileTimeUtc();
            
            ValidateLesson();
            await lessonService.CreateAsync(lessonDto);
            //var createdLesson = await lessonService.CreateAsync(lessonDto);
            //navMgr.NavigateTo($"/lessons/{createdLesson.Id}");
            msg = "Lesson created successfully!";
            //showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    
   
 
    private void ValidateLesson()
    {
       /* if (string.IsNullOrEmpty(lessonTopic))
        {
            msg = "Topic cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(Description))
        {
            msg = "Description cannot be empty!";
            return;
        } DOESNT WORK*/
      
        if (lessonDto.Topic == "")
            throw new Exception("Topic is required");
        if(lessonDto.Description == "")
            throw new Exception("Description is required");
       // if (Date == "")
          //  throw new Exception("The date is required"); Error
    }
    /*
    private void Proceed()
    {
        //showModal = false;
        navMgr.NavigateTo("/ViewLessons");
    }*/
}



 
   
   

    
