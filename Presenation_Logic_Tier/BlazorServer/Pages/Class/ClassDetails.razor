@page "/classes/{classId}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.LessonDTO
@inject ILessonService lessonService
@inject IClassService classService
@inject NavigationManager navMgr

@if (SelectedClass == null)
{
    <span>Loading class details...</span>
}
else
{
    <div class="class-container">
        <div class="class-card">
            <h2>@SelectedClass.Title @SelectedClass.Room</h2>
            <div class="d-flex">
                <AuthorizeView Policy="MustBeTeacher">
                    <Authorized Context="teacherAuthorized">
                        <ClassAttendanceComponent ClassId="@ClassId"/>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Policy="MustBeStudent">
                    <Authorized Context="studentAuthorized">
                        <SingleUserAttendanceComponent ClassId="@ClassId"/>
                    </Authorized>
                </AuthorizeView>
                <ParticipantsComponent ClassId="@ClassId"/>
            </div>
        </div>
    </div>

    <div class="lessons-container">
        <AuthorizeView Policy="MustBeTeacher">
            <div class="add-icon-container d-flex align-items-center justify-content-center w-100" @onclick="AddLesson">
                <img src="/add.png" alt="Add Icon" style="width: 30px;"/>
            </div>
        </AuthorizeView>
        @if (SelectedClass.Lessons == null)
        {
            <span>Loading lessons...</span>
        }
        else if (!SelectedClass.Lessons.Any())
        {
            <p>No lessons available for this class</p>
        }
        else
        {
            @foreach (Lesson lesson in SelectedClass.Lessons.OrderByDescending(l => l.Date))
            {
                Console.WriteLine($"Lesson ID: {lesson.Id}");
                <div class="lesson-card">
                    <div class="icon-container">
                        <img src="/notebook.png" alt="Lesson Icon"/>
                    </div>
                    <div class="lesson-content">
                        <h4 @onclick="() => ViewLesson(lesson)">@lesson.Topic. @lesson.Date </h4>
                        <AuthorizeView Policy="MustBeTeacher">
                            <button @onclick:stopPropagation="true" @onclick:preventDefault="true"
                                    @onclick="@(() => DeleteLessonByIdAsync(lesson.Id))" type="button" class="btn btn-danger">
                                Delete
                            </button>
                        </AuthorizeView>
                    </div>
                </div>
            }
        }
    </div>
}

@code {

    [Parameter]
    public string ClassId { get; set; }
    
    public LessonUpdateDTO Updatedto { get; set; }
    public ClassEntity SelectedClass;


    protected override async Task OnInitializedAsync()
    {
        Updatedto = null!;
        try
        {
            SelectedClass = await classService.GetByIdAsync(ClassId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        await base.OnInitializedAsync();
    }

    private void ViewLesson(Lesson lesson)
    {
        var lessonId = lesson.Id;
        Console.WriteLine($"Getting lesson overview for the lesson with id: {lessonId}");
        navMgr.NavigateTo($"{ClassId}/Lessons/{lessonId}");
        Console.WriteLine($"Navigating to the lesson overview page with the id: {lessonId}");
    }


    private async Task DeleteLessonByIdAsync(string lessonId)
    {
        try
        {
            await lessonService.DeleteAsync(lessonId);

            var list = new List<Lesson>(SelectedClass.Lessons!);
            list.RemoveAll(lesson => lesson.Id == lessonId);
            SelectedClass.Lessons = list;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    /*
    private async Task UpdateAsync()
    {
        try
        {
            await lessonService.UpdateAsync(updatedto);
            navMgr.NavigateTo("/ViewUpdateLesson");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
           
        }
    }*/

    private void AddLesson()
    {
    }

}