@page "/classes/{classId}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.LessonDTO
@inject ILessonService lessonService
@inject IClassService classService
@inject NavigationManager navMgr

@if (selectedClass == null)
{
    <span>Loading class details...</span>
}
else
{
    <div class="class-container">
        <div class="class-card">
            <h2>@selectedClass.Title @selectedClass.Room</h2>
            <AuthorizeView Policy="MustBeTeacher">
                <div class="add-icon-container" @onclick="AddLesson">
                    <img src="/add.png" alt="Add Icon"/>
                </div>
            </AuthorizeView>
        </div>
    </div>
@if (selectedClass.Lessons == null)
{
    <span>Loading lessons...</span>
}
else if (!selectedClass.Lessons.Any())
{
    <p>No lessons available for this class</p>
}
else
{
    <div class="lessons-container">
        @foreach (Lesson lesson in selectedClass.Lessons)
        {
            Console.WriteLine($"Lesson ID: {lesson.Id}");
            <div class="lesson-card">
                <div class="icon-container">
                    <img src="/notebook.png" alt="Lesson Icon"/>
                </div>
                <div class="lesson-content">
                    <h4 @onclick="() => ViewLesson(lesson)">@lesson.Topic. @lesson.Date </h4>
                    <AuthorizeView Policy="MustBeTeacher">
                        <button @onclick:stopPropagation="true" @onclick:preventDefault="true"
                                @onclick="@(() => DeleteLessonById(lesson.Id))" type="button" class="btn btn-danger">
                            Delete
                        </button>
                    </AuthorizeView>
                </div>
            </div>
        }
    </div>
}
@if (selectedClass.Participants == null)
{
    <span>Loading participants...</span>
}
else if (!selectedClass.Participants.Any())
{
    <p>No participants assigned for this class</p>
}
else
{
    <div class="lessons-container">
        @foreach (User user in selectedClass.Participants)
        {
            <div class="lesson-card">
                <div class="icon-container">
                    <h4 class="oi oi-person"></h4>
                </div>
                <div class="lesson-content">
                    <h4 >@user.FirstName @user.LastName </h4>
                </div>
            </div>
        }
    </div>
}
}

@code {

    [Parameter]
    public string ClassId { get; set; }


    private readonly LessonUpdateDTO updatedto = null!;

    private ClassEntity selectedClass;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            selectedClass = await classService.GetByIdAsync(ClassId);
            Console.WriteLine(selectedClass.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void ViewLesson(Lesson lesson)
    {
        var lessonId = lesson.Id;
        Console.WriteLine($"Getting lesson overview for the lesson with id: {lessonId}");
        navMgr.NavigateTo($"/Lessons/{lessonId}");
        Console.WriteLine($"Navigating to the lesson overview page with the id: {lessonId}");
    }


    private async Task DeleteLessonById(string lessonId)
    {
        try
        {
            await lessonService.DeleteAsync(lessonId);

            var list = new List<Lesson>(selectedClass.Lessons!);
            list.RemoveAll(lesson => lesson.Id == lessonId);
            selectedClass.Lessons = list;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    /*
    private async Task UpdateAsync()
    {
        try
        {
            await lessonService.UpdateAsync(updatedto);
            navMgr.NavigateTo("/ViewUpdateLesson");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
           
        }
    }*/

    private void AddLesson()
    {
    }

}