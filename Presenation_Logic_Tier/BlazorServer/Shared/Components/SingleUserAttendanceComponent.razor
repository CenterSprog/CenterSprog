@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.LessonDTO
@using Domain.DTOs.ClassDTO
@inject IClassService ClassService;
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex align-items-center">
    <button type="button" class="btn btn-warning fw-bold w-auto" @onclick="@SeeMyAttendance">Attendance <span class="oi oi-calendar"></span></button>
</div>
<Modal ShowModal="ShowModal">

    @if (!Lessons.Any())
    {
        <p>No lessons assigned for this class</p>
    }
    else
    {
        <h4 class="fw-bold">My Attendance <span class="border p-2 border-dark rounded border-2">@TotalAbsence%</span></h4>
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Date</th>
                <th>Title</th>
                <th>Status</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var lesson in Lessons.OrderByDescending(l => l.Date))
            {
                <tr>
                    <td>@lesson.Date</td>
                    <td>@lesson.Topic</td>
                    @if (lesson.HasAttended)
                    {
                        <td class="bg-success text-light text-center"><span class="oi oi-check"></span></td>
                    }
                    else
                    {
                        <td class="bg-danger text-dark text-center"><span class="oi oi-x"></span></td>
                    }
                </tr>
            }
            </tbody>
        </table>
    }
    @if (Msg != null)
    {
        <div class="alert-danger alert mt-5">
            @Msg
        </div>
    }
</Modal>

@code {

    [Parameter]
    public string ClassId { get; set; }

    private bool ShowModal { get; set; }
    private string? Msg { get; set; }
    private IEnumerable<LessonAttendanceDTO> Lessons { get; set; }
    private string TotalAbsence { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Msg = null;
        Lessons = new List<LessonAttendanceDTO>();
        TotalAbsence = "0.00";
    }

    private async Task FetchMyAttendanceAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var username = user.Identity?.Name;
            var searchParameter = new SearchClassAttendanceDTO(ClassId, username);
            Lessons = await ClassService.GetClassAttendanceByUsernameAsync(searchParameter);
            
            int absenceCount  = Lessons.Count(obj => !obj.HasAttended);
            TotalAbsence = ((double)absenceCount / Lessons.Count() * 100).ToString();
        }
        catch (Exception e)
        {
            Msg = e.Message + e.StackTrace;
        }
    }

    private async Task SeeMyAttendance()
    {
        await FetchMyAttendanceAsync();
        ShowModal = true;
    }
}