@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.LessonDTO
@using Domain.DTOs.ClassDTO
@using Domain.DTOs.UserDTO
@inject IClassService ClassService;
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex align-items-center">
    <button type="button" class="btn btn-warning fw-bold w-auto" @onclick="@SeeClassAttendance">Attendance <span class="oi oi-calendar"></span></button>
</div>
<Modal ShowModal="ShowModal">

    @if (!Users.Any())
    {
        <p>No students assigned for this class</p>
    }
    else
    {
        <h4 class="fw-bold">Class Attendance</h4>
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Student Name</th>
                <th>Contact</th>
                <th>Total Absence</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in Users.OrderBy(u=>u.FirstName))
            {
                <tr>
                    <td>@user.FirstName @user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.TotalAbsence.ToString()%</td>
                </tr>
            }
            </tbody>
        </table>
    }
    @if (Msg != null)
    {
        <div class="alert-danger alert mt-5">
            @Msg
        </div>
    }
</Modal>

@code {

    [Parameter]
    public string ClassId { get; set; }

    private bool ShowModal { get; set; }
    private string? Msg { get; set; }
    private IEnumerable<UserAttendanceDTO> Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Msg = null;
        Users = new List<UserAttendanceDTO>();
    }

    private async Task FetchClassAttendance()
    {
        try
        {
            Users = await ClassService.GetClassAttendanceAsync(ClassId);
        }
        catch (Exception e)
        {
            Msg = e.Message + e.StackTrace;
        }
    }

    private async Task SeeClassAttendance()
    {
        await FetchClassAttendance();
        ShowModal = true;
    }
}