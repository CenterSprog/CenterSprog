@using Domain.Models
@using Domain.DTOs.HomeworkDTO
@using HttpClients.ClientInterfaces
@inject ILessonService lessonService
@inject IHandInHomeworkService HandInHomeworkService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFeedbackService FeedbackService

<div class="submitted-container">
    <button class="submitted-button" disabled>
        <strong>Submitted</strong>
    </button>

    <button @onclick="SeeFeedbackAsync" type="button">
        <strong>See feedback</strong>
    </button>
</div>
<div class="msg-container">
    @if (Msg != null)
    {
        <div class="alert-danger alert mt-5">
            @Msg
        </div>
    }
</div>

<Modal ShowModal="@(ShowModal && MyFeedback != null)">
    <div class="modal-container">
        <h4 class="fw-bold">Feedback</h4>
        <div class="modal-body">
            <p>
                <strong>Grade:</strong> @MyFeedback.Grade
            </p>
            <p>
                <strong>Comment:</strong> @MyFeedback.Comment
            </p>
        </div>
    </div>
</Modal>

@code {

    [Parameter]
    public string HandInId { get; set; }

     

    public string Msg { get; set; }
    public bool ShowModal { get; set; } 
    public Feedback MyFeedback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ShowModal = false;
        Msg = null;
        MyFeedback = new Feedback();
         

        await base.OnInitializedAsync();
    }


    private async Task SeeFeedbackAsync()
    {
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.Identity?.Name;
        
        try
        {
            Msg = null;            
            MyFeedback = await FeedbackService.GetFeedbackByHandInIdAndStudentUsernameAsync(HandInId, username);
            ShowModal = true;
        }
        catch(Exception e)
        {
            Msg = e.Message;
        }
    }
    
}