@using Domain.DTOs.UserDTO
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager NavManager
@inject IUserService UserService

<section class="d-flex flex-column">
    
    <p>Register user</p>
    <div class="mb-3">
        <label for="firstNameInput" class="form-label">First name</label>
        <input type="text" class="form-control" id="firstNameInput" @bind="_dto.FirstName">
    </div>
    <div class="mb-3">
        <label for="lastNameInput" class="form-label">Last name</label>
        <input type="text" class="form-control" id="lastNameInput" @bind="_dto.LastName">
    </div>
    <div class="mb-3">
        <label for="emailInput" class="form-label">Email address</label>
        <input type="email" class="form-control" id="emailInput" placeholder="name@example.com" @bind="_dto.Email">
    </div>
    <select @bind="_dto.Role" class="form-select" aria-label="Role selection">
        <option value="student">Student</option> 
        <option value="teacher">Teacher</option> 
    </select>

    <button class="mt-5 btn btn-outline-success" type="submit" @onclick="RegisterUserAsync" >Register</button>

    @if (_msg is not null && _msg != "")
    {
        <div class="mt-4 alert-danger alert">
            @_msg
        </div>
    }
</section>

@code {
    private string _msg;
    private UserCreationDto _dto;

    protected override async Task OnInitializedAsync()
    {
        _msg = null;
        _dto = new UserCreationDto();
        _dto.Role = "student";
    }

    public async Task RegisterUserAsync()
    {
        try
        {
            ValidateUser();
            User createdUser = await UserService.CreateUserAsync(_dto);
            NavManager.NavigateTo($"/users/{createdUser.Username}");
        }
        catch (Exception e)
        {
            
            _msg = e.Message;
        }
    }

    private void ValidateUser()
    {
        if (_dto.FirstName.Trim() == "")
            throw new Exception("First name is required");
        if( _dto.LastName.Trim() == "")
            throw new Exception("Last name is required");
        if (!IsValidEmail(_dto.Email))
            throw new Exception("Invalid email address");
        if(_dto.Role.Trim() == "")
            throw new Exception("Role need to be selected");

    }

    private bool IsValidEmail(string email)
    {
        try {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch {
            return false;
        }
    }
}