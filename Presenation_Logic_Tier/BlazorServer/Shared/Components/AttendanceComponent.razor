@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs.LessonDTO
@inject ILessonService lessonService;

<div class="d-flex align-items-center">
    <button type="button" class="btn btn-warning fw-bold w-auto" @onclick="@SeeAttendees">Attendance <span class="oi oi-calendar"></span></button>
    @if (Success is not null)
    {
        <div class="alert-success alert ms-3 mb-0">
            @Success
        </div>
    }
</div>
<Modal ShowModal="ShowModal">

    @if (!Attendees.Any())
    {
        <p>No participants assigned for this class</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Student</th>
                <th>Attendance</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var attendee in Attendees.OrderBy(a => a.FirstName))
            {
                <tr>
                    <td>@attendee.FirstName @attendee.LastName</td>
                    <td>
                        <input type="checkbox" @bind="SelectedUsers[attendee.Username]"/>
                    </td>
                </tr>
            }
            </tbody>
        </table>

        <button class="btn btn-primary" @onclick="Submit">Submit</button>
    }
    @if (Msg != null)
    {
        <div class="alert-danger alert mt-5">
            @Msg
        </div>
    }
</Modal>

@code {

    [Parameter]
    public List<User>? MarkedAttendees { get; set; }

    [Parameter]
    public List<User> Attendees { get; set; }

    [Parameter]
    public string LessonId { get; set; }

    private bool ShowModal { get; set; }
    private string? Msg { get; set; }
    private string? Success { get; set; }
    private Dictionary<string, bool> SelectedUsers { get; set; }
    private List<string> SelectedUserList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Msg = null;
        Success = null;
        SelectedUsers = new Dictionary<string, bool>();
        SelectedUserList = new List<string>();

        if (MarkedAttendees != null)
        {
            foreach (var attendee in Attendees)
            {
                var isSelected = MarkedAttendees.Any(markedAttendee => string.Equals(markedAttendee.Username, attendee.Username, StringComparison.OrdinalIgnoreCase));
                SelectedUsers[attendee.Username] = isSelected;
            }
        }
    }

    private void SeeAttendees()
    {
        ShowModal = true;
    }

    private async Task Submit()
    {
        SelectedUserList = SelectedUsers.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
        try
        {
            var amountOfAttendees = await lessonService.AddAttendanceAsync(new AddAttendanceDTO(LessonId, SelectedUserList));
            Success = $"Attendance was successfully marked. {amountOfAttendees}/{Attendees.Count} attendees";
            ShowModal = false;
        }
        catch (Exception e)
        {
            Msg = e.Message + e.StackTrace;
        }
    }

}